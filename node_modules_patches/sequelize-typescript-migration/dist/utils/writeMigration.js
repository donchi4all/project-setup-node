/* eslint-disable @typescript-eslint/no-var-requires */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const beautify = require('js-beautify');
const fs = require('fs');
const path = require('path');

const removeCurrentRevisionMigrations = require('./removeCurrentRevisionMigrations');

async function writeMigration(revision, migration, options) {
  const revisionNumber = ((now) => {
    const format = n => n < 10 ? `0${n}` : n;
    const y = now.getUTCFullYear();
    const m = format(+now.getUTCMonth() + 1);
    const d = format(+now.getUTCDate());
    const t = now.toLocaleTimeString('en-GB', { timeZone: 'UTC' }).replace(/\D/g, '');
    return `${y}${m}${d}${t}`;
  })(new Date());

  await removeCurrentRevisionMigrations.default(revisionNumber, options.outDir, options);

  const name = options.migrationName || 'noname';
  const comment = options.comment || '';

  let commands = `const migrationCommands = [
  /**
   * CREATE
   * <table_name> TABLE
   */
  ${migration.commandsUp.join(`,\n
  /**
   * CREATE
   * <table_name> TABLE
   */`)}\n];\n`;

  let commandsDown = `const rollbackCommands = [\n\n${migration.commandsDown.join(',\n')}\n];\n`;

  const actions = ` * ${migration.consoleOut.join('\n * ')}`;

  const beautifyFormat = (command) => {
    const beautifyConfig = {
      indent_size: 2,
      indent_char: ' ',
      preserve_newlines: true,
    };
    return beautify(command, beautifyConfig).replace(/"/g, '\'').replace(/(\n\n)/, '\n');
  };

  commands = beautifyFormat(commands);
  commandsDown = beautifyFormat(commandsDown);

  const info = {
    revision,
    name,
    created: new Date(),
    comment,
  };

  const template = `/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/no-var-requires */

'use strict';

const Sequelize = require('sequelize');

/**
 * Actions summary:
 *
${actions}
 *
 **/

const info = ${JSON.stringify(info, null, 2).replace(/"/g, '\'')};

${commands}

${commandsDown}

module.exports = {
  pos: 0,
  info: info,

  /**
   * <comment>
   * MIGRATION UP
   */
  up: function(queryInterface, Sequelize)
  {
    let index = this.pos;
    return new Promise(function(resolve, reject) {
      function next() {
        if (index < migrationCommands.length)
        {
          const command = migrationCommands[index];
          console.log('[#' + index + '] execute: ' + command.fn);
          index++;
          queryInterface[command.fn].apply(queryInterface, command.params).then(next, reject);
        }
        else
          resolve();
      }
      next();
    });
  },

  /**
   * <comment>
   * MIGRATION DOWN
   */
  down: function(queryInterface, Sequelize)
  {
    let index = this.pos;
    return new Promise(function(resolve, reject) {
      function next() {
        if (index < rollbackCommands.length)
        {
          const command = rollbackCommands[index];
          console.log('[#' + index + '] execute: ' + command.fn);
          index++;
          queryInterface[command.fn].apply(queryInterface, command.params).then(next, reject);
        }
        else
          resolve();
      }
      next();
    });
  },
};
`;

  const filename = path.join(options.outDir, `${revisionNumber + (name !== '' ? `-${name.replace(/[\s-]/g, '_')}` : '')}.js`);

  fs.writeFileSync(filename, template);

  return { filename, info, revisionNumber };
}

exports.default = writeMigration;
//# sourceMappingURL=writeMigration.js.map